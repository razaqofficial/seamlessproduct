<?php

namespace Tests\Unit;

use App\Models\Product;
use App\Models\ProductCategory;
use Database\Seeders\ProductCategorySeeder;
use Database\Seeders\ProductSeeder;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use DatabaseTransactions;
    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(ProductCategorySeeder::class);
        $this->seed(ProductSeeder::class);
    }

    public function test_index()
    {
        $productResponse = $this->getJson('/api/products');
        $productResponse->assertOk()
            ->assertJsonStructure([
                'data', 'message', 'success'
            ]);
    }

    public function test_show()
    {


        //Get a product
        $product = Product::first();

        $productResponse = $this->getJson("/api/products/{$product->id}");
        $productResponse->assertOk()
            ->assertJsonStructure([
                'data', 'message', 'success'
            ]);

        $this->assertSame($product->id, $productResponse->getData()->data->id);
    }

    public function test_store()
    {
        //Count DB records before insert
        $beforeInsertCount = DB::table('products')->count();

        $productData = [
            'name' => 'Test faker',
            'price' => 9.99,
            'stock_quantity' => 5,
            'description' => 'This is from a test case',
            'product_category_id' => ProductCategory::first()->id,
        ];

        $productResponse = $this->postJson("/api/products", $productData);

        $productResponse->assertOk() ->assertJsonStructure([
            'data', 'message', 'success'
        ]);

        $this->assertDatabaseHas('products', $productData);

        $this->assertDatabaseCount('products', $beforeInsertCount+1);

    }

    public function test_update()
    {
        //Get a product
        $product = Product::has('category')->first();

        $productData = [
            'name' => 'Test faker update',
            'price' => 20.55,
            'stock_quantity' => 5555,
            'description' => 'This is a product updat from a test case',
            'product_category_id' => $product->product_category_id,
        ];

        // Assert no product of such data exist
        $this->assertDatabaseMissing('products', $productData);

        //Count DB records before update
        $beforeUpdateCount = DB::table('products')->count();


        $productData['_method'] = 'patch';
        $productResponse = $this->postJson("/api/products/{$product->id}", $productData);
        $productResponse->assertOk()
            ->assertJson([
                'message' => 'Product updated successfully',
                'success' => true
            ]);


        unset($productData['_method']);

        // Assert product was updated
        $this->assertDatabaseHas('products', $productData);

        // Assert it wasn't a new product that was updated
        $this->assertDatabaseCount('products', $beforeUpdateCount);
    }

    public function test_delete()
    {
        $product = Product::first()->toArray();

        $this->assertDatabaseHas('products', $product);

        //Count DB records before delete
        $beforeDeleteCount = DB::table('products')->count();

        $productResponse = $this->postJson("/api/products/{$product['id']}", [
            '_method' => 'delete'
        ]);
        $productResponse->assertOk()
            ->assertJson([
                'message' => 'Product deleted successfully',
                'success' => true
            ]);

        // Assert no product of such data exist
        $this->assertDatabaseMissing('products', $product);

        // Assert it wasn't a new product that was updated
        $this->assertDatabaseCount('products', $beforeDeleteCount-1);
    }
}
